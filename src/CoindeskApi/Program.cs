using System.Reflection;
using CoindeskApi.Data;
using CoindeskApi.Services;
using Microsoft.EntityFrameworkCore;
using CoindeskApi.RequestHelper;

var builder = WebApplication.CreateBuilder(args);


builder.Services.AddControllers();

builder.Services.AddDbContext<CoinDbContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));

builder.Services.AddAutoMapper(typeof(MappingProfile));

// Configures the app to use the API Explorer to discover and describe endpoints with default annotations.
// WithOpenApi overrides matching, default annotations generated by the API Explorer with those produced
// from the Microsoft.AspNetCore.OpenApi package.
builder.Services.AddEndpointsApiExplorer();


builder.Services.AddSwaggerGen(options =>
{
    var xmlFilename = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFilename));
});

builder.Services.AddHttpClient<CoinDeskService>();

var app = builder.Build();

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI(options =>
    {
        // serve the Swagger UI at the app's root
        options.SwaggerEndpoint("/swagger/v1/swagger.json", "v1");
        options.RoutePrefix = string.Empty;
    });
}

// app.UseHttpsRedirection();

// app.UseAuthorization();

app.MapControllers();

try
{
    DbInitializer.InitDb(app);
}
catch (Exception ex)
{
    System.Console.WriteLine(ex);
}

app.Run();
